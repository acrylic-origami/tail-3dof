/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x1000004a generated on 2020-07-01 06:17:32.205438
/// Generated using solver translation3d
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x1000004a);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[1]);
x6=((0.234)*x2);
x7=((0.234)*x4);
x8=((0.195)*x3);
x9=(x0*x1);
eetrans[0]=((((0.195)*x0))+(((0.195)*x9))+(((-1.0)*x3*x7))+((x6*x9)));
eetrans[1]=(((x0*x7))+((x1*x8))+x8+((x1*x3*x6)));
eetrans[2]=((((-0.195)*x5))+(((-1.0)*x5*x6)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 3; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x33000003; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_px=px;
new_py=py;
new_pz=pz;
px = new_px; py = new_py; pz = new_pz;
pp=((px*px)+(py*py)+(pz*pz));
IkReal op[8+1], zeror[8];
int numroots;
IkReal x10=((0.39)*px);
IkReal x11=((1.0)*(px*px));
IkReal x12=((1.0)*(py*py));
IkReal x13=((1.0)*(pz*pz));
IkReal x14=(x11+x13+x12);
IkReal x15=((0.146016)+(((-1.0)*x14))+x10);
IkReal x16=((-0.036504)+(((-1.0)*x14))+x10);
IkReal x17=(x10+x14);
IkReal x18=((0.146016)+(((-1.0)*x17)));
IkReal x19=((-0.036504)+(((-1.0)*x17)));
IkReal gconst0=x15;
IkReal gconst1=x16;
IkReal gconst2=x15;
IkReal gconst3=x16;
IkReal gconst4=x18;
IkReal gconst5=x19;
IkReal gconst6=x18;
IkReal gconst7=x19;
IkReal x20=py*py;
IkReal x21=px*px;
IkReal x22=((2.0)*gconst0);
IkReal x23=((1.0)*gconst1);
IkReal x24=((1.0)*gconst4);
IkReal x25=((2.0)*gconst1);
IkReal x26=((1.0)*gconst0);
IkReal x27=(gconst5*gconst7);
IkReal x28=((2.0)*gconst4);
IkReal x29=(gconst1*gconst6);
IkReal x30=(gconst3*gconst4);
IkReal x31=(gconst2*gconst5);
IkReal x32=((0.17083872)*py);
IkReal x33=(gconst0*gconst3);
IkReal x34=((0.34167744)*py);
IkReal x35=(gconst3*gconst5);
IkReal x36=((2.0)*gconst5);
IkReal x37=(gconst4*gconst6);
IkReal x38=(gconst2*gconst4);
IkReal x39=(gconst0*gconst6);
IkReal x40=(gconst5*gconst6);
IkReal x41=(gconst4*gconst7);
IkReal x42=(gconst1*gconst2);
IkReal x43=(gconst0*gconst2);
IkReal x44=(gconst0*gconst7);
IkReal x45=((0.219024)*x40);
IkReal x46=(gconst6*x32);
IkReal x47=(gconst5*x32);
IkReal x48=((0.1332542016)*x20);
IkReal x49=((0.219024)*x31);
IkReal x50=((0.219024)*x29);
IkReal x51=(gconst2*x32);
IkReal x52=(gconst1*x32);
IkReal x53=((0.219024)*x42);
IkReal x54=(gconst3*x20);
IkReal x55=(gconst6*x20);
IkReal x56=(gconst2*x20);
IkReal x57=((4.0)*px*py);
IkReal x58=((4.0)*x21);
IkReal x59=(gconst7*x20);
IkReal x60=(x20*x41);
IkReal x61=(x20*x40);
IkReal x62=(x20*x31);
IkReal x63=(x20*x30);
IkReal x64=(x20*x44);
IkReal x65=(x20*x29);
IkReal x66=(x20*x42);
IkReal x67=(x20*x33);
IkReal x68=(gconst1*x57);
IkReal x69=(x27*x57);
IkReal x70=(x37*x57);
IkReal x71=(x41*x57);
IkReal x72=(x40*x57);
IkReal x73=((1.0)*x20*x27);
IkReal x74=(x24*x55);
IkReal x75=(x38*x57);
IkReal x76=(gconst7*x68);
IkReal x77=(x35*x57);
IkReal x78=(x39*x57);
IkReal x79=(x30*x57);
IkReal x80=(x44*x57);
IkReal x81=(x31*x57);
IkReal x82=(x29*x57);
IkReal x83=(x23*x59);
IkReal x84=(x24*x56);
IkReal x85=(x26*x55);
IkReal x86=((1.0)*x20*x35);
IkReal x87=(gconst3*x68);
IkReal x88=(x43*x57);
IkReal x89=(x33*x57);
IkReal x90=(x42*x57);
IkReal x91=(x26*x56);
IkReal x92=(x23*x54);
IkReal x93=(x51+x52);
IkReal x94=(x46+x47);
IkReal x95=(x66+x67);
IkReal x96=(x60+x61);
IkReal x97=(x89+x90);
IkReal x98=(x70+x69);
IkReal x99=(x88+x87);
IkReal x100=(x72+x71);
IkReal x101=(x74+x73+x45);
IkReal x102=(x53+x91+x92);
IkReal x103=(x62+x63+x64+x65);
IkReal x104=(x77+x76+x75+x78);
IkReal x105=(x79+x82+x80+x81);
IkReal x106=(x48+x49+x50+x83+x86+x84+x85);
op[0]=((((-1.0)*x101))+x96);
op[1]=(x100+(((-1.0)*x94))+(((-1.0)*x98)));
op[2]=((((-0.438048)*x40))+(((-1.0)*x106))+x103+(((-1.0)*x27*x58))+(((-1.0)*x37*x58))+(((-1.0)*x28*x59))+((x40*x58))+(((-1.0)*x36*x55))+((x41*x58))+(((2.0)*x20*x27))+((x28*x55)));
op[3]=((((-1.0)*gconst5*x34))+(((-1.0)*gconst6*x34))+(((-1.0)*x100))+(((-1.0)*x104))+x105+x98+(((-1.0)*x93)));
op[4]=((((-1.0)*x35*x58))+(((-1.0)*gconst1*gconst7*x58))+(((-0.438048)*x31))+(((-1.0)*x25*x55))+((x44*x58))+(((-1.0)*x101))+(((-1.0)*x102))+(((2.0)*x20*x35))+(((-2.0)*x62))+(((-1.0)*x39*x58))+(((-1.0)*x38*x58))+((x25*x59))+(((-0.438048)*x29))+x95+x96+(((-0.2665084032)*x20))+((x31*x58))+(((-1.0)*x28*x54))+(((-1.0)*x22*x59))+((x30*x58))+((x28*x56))+((x22*x55))+((x29*x58)));
op[5]=((((-1.0)*gconst1*x34))+(((-1.0)*x105))+x104+x97+(((-1.0)*x94))+(((-1.0)*x99))+(((-1.0)*gconst2*x34)));
op[6]=((((-1.0)*x25*x56))+(((-0.438048)*x42))+(((-1.0)*x106))+x103+((x25*x54))+((x33*x58))+((x42*x58))+(((-1.0)*gconst1*gconst3*x58))+(((-1.0)*x22*x54))+((x22*x56))+(((-1.0)*x43*x58)));
op[7]=(x99+(((-1.0)*x93))+(((-1.0)*x97)));
op[8]=((((-1.0)*x102))+x95);
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((2.0)*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x107=((4.27350427350427)*px);
IkReal x108=((4.27350427350427)*py);
if( IKabs((((cj0*x108))+(((-1.0)*sj0*x107)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-0.6)+(((10.9577032653956)*(pz*pz)))+(((10.9577032653956)*(px*px)))+(((-1.0)*cj0*x107))+(((10.9577032653956)*(py*py)))+(((-1.0)*sj0*x108)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj0*x108))+(((-1.0)*sj0*x107))))+IKsqr(((-0.6)+(((10.9577032653956)*(pz*pz)))+(((10.9577032653956)*(px*px)))+(((-1.0)*cj0*x107))+(((10.9577032653956)*(py*py)))+(((-1.0)*sj0*x108))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2((((cj0*x108))+(((-1.0)*sj0*x107))), ((-0.6)+(((10.9577032653956)*(pz*pz)))+(((10.9577032653956)*(px*px)))+(((-1.0)*cj0*x107))+(((10.9577032653956)*(py*py)))+(((-1.0)*sj0*x108))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
evalcond[0]=((((0.234)*(IKsin(j2))))+((px*sj0))+(((-1.0)*cj0*py)));
evalcond[1]=((0.054756)+(((-1.0)*(px*px)))+(((0.39)*cj0*px))+(((0.09126)*(IKcos(j2))))+(((0.39)*py*sj0))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j1eval[3];
j1eval[0]=((1.0)+(((1.2)*cj2)));
j1eval[1]=((IKabs(pz))+(IKabs(((-0.195)+((cj0*px))+((py*sj0))))));
j1eval[2]=IKsign(((0.195)+(((0.234)*cj2))));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  || IKabs(j1eval[2]) < 0.0000010000000000  )
{
{
IkReal j1eval[2];
IkReal x109=(py*sj0);
IkReal x110=((6.15384615384615)*cj2);
IkReal x111=(cj0*px);
IkReal x112=((1.0)+(((1.2)*cj2)));
j1eval[0]=x112;
j1eval[1]=((((-5.12820512820513)*x111))+(((-5.12820512820513)*x109))+(((-1.0)*x110*x111))+x112+(((-1.0)*x109*x110)));
if( IKabs(j1eval[0]) < 0.0000010000000000  || IKabs(j1eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.833333333333333)+cj2)))+(IKabs(((-1.0)+(IKsign(sj2)))))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=0.5527708;
cj2=-0.833333333333333;
j2=2.55590708081597;
j1eval[0]=((-1.0)+(((5.12820512820513)*cj0*px))+(((5.12820512820513)*py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x113=((((26.2984878369494)*(py*py)))+(((26.2984878369494)*(px*px))));
IkReal x119 = x113;
if(IKabs(x119)==0){
continue;
}
IkReal x114=pow(x119,-0.5);
if((x113) < -0.00001)
continue;
IkReal x115=IKabs(IKsqrt(x113));
IkReal x116=((5.12820512820513)*x114);
CheckValue<IkReal> x120=IKPowWithIntegerCheck(x115,-1);
if(!x120.valid){
continue;
}
IkReal x117=x120.value;
if((((1.0)+(((-1.0)*(x117*x117))))) < -0.00001)
continue;
IkReal x118=IKsqrt(((1.0)+(((-1.0)*(x117*x117)))));
if( (x117) < -1-IKFAST_SINCOS_THRESH || (x117) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x121 = IKatan2WithCheck(IkReal(((5.12820512820513)*px)),IkReal(((5.12820512820513)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x121.valid){
continue;
}
IkReal gconst24=((IKasin(x117))+(((-1.0)*(x121.value))));
IkReal gconst25=((((-1.0)*px*x116*x118))+((py*x116*x117)));
IkReal gconst26=(((px*x116*x117))+((py*x116*x118)));
CheckValue<IkReal> x122 = IKatan2WithCheck(IkReal(((5.12820512820513)*px)),IkReal(((5.12820512820513)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x122.valid){
continue;
}
if((((((26.2984878369494)*(py*py)))+(((26.2984878369494)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x123=IKPowWithIntegerCheck(IKabs(IKsqrt(((((26.2984878369494)*(py*py)))+(((26.2984878369494)*(px*px)))))),-1);
if(!x123.valid){
continue;
}
if( (x123.value) < -1-IKFAST_SINCOS_THRESH || (x123.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x122.value)+(((-1.0)*(IKasin(x123.value))))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x124=((0.39)*gconst26*px);
IkReal x125=((0.39)*gconst25*py);
CheckValue<IkReal> x127=IKPowWithIntegerCheck(((-0.07605)+x124+x125),-1);
if(!x127.valid){
continue;
}
IkReal x126=x127.value;
cj1array[0]=(((x126*(px*px)))+(((-1.0)*x124*x126))+(((-1.0)*x125*x126))+((x126*(py*py)))+(((0.021294)*x126)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x128=IKsin(j1);
IkReal x129=IKcos(j1);
IkReal x130=((1.0)*gconst26*px);
IkReal x131=((1.0)*gconst25*py);
evalcond[0]=((((-1.0)*x128*x130))+(((-1.0)*x128*x131))+(((0.195)*x128)));
evalcond[1]=((((-1.0)*x129*x130))+(((-1.0)*x129*x131))+(((0.195)*x129)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x132=((((26.2984878369494)*(py*py)))+(((26.2984878369494)*(px*px))));
if((x132) < -0.00001)
continue;
IkReal x133=IKabs(IKsqrt(x132));
IkReal x139 = x132;
if(IKabs(x139)==0){
continue;
}
IkReal x134=pow(x139,-0.5);
CheckValue<IkReal> x140=IKPowWithIntegerCheck(x133,-1);
if(!x140.valid){
continue;
}
IkReal x135=x140.value;
if((((1.0)+(((-1.0)*(x135*x135))))) < -0.00001)
continue;
IkReal x136=IKsqrt(((1.0)+(((-1.0)*(x135*x135)))));
IkReal x137=((5.12820512820513)*x134*x135);
IkReal x138=((5.12820512820513)*x134*x136);
if( (x135) < -1-IKFAST_SINCOS_THRESH || (x135) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x141 = IKatan2WithCheck(IkReal(((5.12820512820513)*px)),IkReal(((5.12820512820513)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x141.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(IKasin(x135))))+(((-1.0)*(x141.value))));
IkReal gconst28=(((px*x138))+((py*x137)));
IkReal gconst29=((((-1.0)*py*x138))+((px*x137)));
CheckValue<IkReal> x142 = IKatan2WithCheck(IkReal(((5.12820512820513)*px)),IkReal(((5.12820512820513)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x142.valid){
continue;
}
if((((((26.2984878369494)*(py*py)))+(((26.2984878369494)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x143=IKPowWithIntegerCheck(IKabs(IKsqrt(((((26.2984878369494)*(py*py)))+(((26.2984878369494)*(px*px)))))),-1);
if(!x143.valid){
continue;
}
if( (x143.value) < -1-IKFAST_SINCOS_THRESH || (x143.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x142.value)+(IKasin(x143.value))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x144=((0.39)*gconst28*py);
IkReal x145=((0.39)*gconst29*px);
CheckValue<IkReal> x147=IKPowWithIntegerCheck(((-0.07605)+x144+x145),-1);
if(!x147.valid){
continue;
}
IkReal x146=x147.value;
cj1array[0]=((((-1.0)*x144*x146))+(((0.021294)*x146))+(((-1.0)*x145*x146))+((x146*(px*px)))+((x146*(py*py))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x148=IKsin(j1);
IkReal x149=IKcos(j1);
IkReal x150=((1.0)*gconst28*py);
IkReal x151=((1.0)*gconst29*px);
evalcond[0]=((((-1.0)*x148*x150))+(((-1.0)*x148*x151))+(((0.195)*x148)));
evalcond[1]=((((0.195)*x149))+(((-1.0)*x149*x151))+(((-1.0)*x149*x150)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x152=((0.39)*py*sj0);
IkReal x153=((0.39)*cj0*px);
CheckValue<IkReal> x155=IKPowWithIntegerCheck(((-0.07605)+x153+x152),-1);
if(!x155.valid){
continue;
}
IkReal x154=x155.value;
cj1array[0]=((((-1.0)*x153*x154))+((x154*(py*py)))+(((-1.0)*x152*x154))+((x154*(px*px)))+(((0.021294)*x154)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x156=IKsin(j1);
IkReal x157=IKcos(j1);
IkReal x158=((1.0)*py*sj0);
IkReal x159=((1.0)*cj0*px);
evalcond[0]=((((-1.0)*x156*x159))+(((-1.0)*x156*x158))+(((0.195)*x156)));
evalcond[1]=((((-1.0)*x157*x158))+(((-1.0)*x157*x159))+(((0.195)*x157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((0.833333333333333)+cj2)))+(IKabs(((1.0)+(IKsign(sj2)))))), 6.28318530717959)));
evalcond[1]=pz;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1eval[1];
sj2=-0.5527708;
cj2=-0.833333333333333;
j2=-2.55590708081597;
j1eval[0]=((-1.0)+(((5.12820512820513)*cj0*px))+(((5.12820512820513)*py*sj0)));
if( IKabs(j1eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x160=((((26.2984878369494)*(py*py)))+(((26.2984878369494)*(px*px))));
IkReal x166 = x160;
if(IKabs(x166)==0){
continue;
}
IkReal x161=pow(x166,-0.5);
if((x160) < -0.00001)
continue;
IkReal x162=IKabs(IKsqrt(x160));
IkReal x163=((5.12820512820513)*x161);
CheckValue<IkReal> x167=IKPowWithIntegerCheck(x162,-1);
if(!x167.valid){
continue;
}
IkReal x164=x167.value;
if((((1.0)+(((-1.0)*(x164*x164))))) < -0.00001)
continue;
IkReal x165=IKsqrt(((1.0)+(((-1.0)*(x164*x164)))));
if( (x164) < -1-IKFAST_SINCOS_THRESH || (x164) > 1+IKFAST_SINCOS_THRESH )
    continue;
CheckValue<IkReal> x168 = IKatan2WithCheck(IkReal(((5.12820512820513)*px)),IkReal(((5.12820512820513)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x168.valid){
continue;
}
IkReal gconst30=((IKasin(x164))+(((-1.0)*(x168.value))));
IkReal gconst31=((((-1.0)*px*x163*x165))+((py*x163*x164)));
IkReal gconst32=(((px*x163*x164))+((py*x163*x165)));
CheckValue<IkReal> x169 = IKatan2WithCheck(IkReal(((5.12820512820513)*px)),IkReal(((5.12820512820513)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x169.valid){
continue;
}
if((((((26.2984878369494)*(py*py)))+(((26.2984878369494)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x170=IKPowWithIntegerCheck(IKabs(IKsqrt(((((26.2984878369494)*(py*py)))+(((26.2984878369494)*(px*px)))))),-1);
if(!x170.valid){
continue;
}
if( (x170.value) < -1-IKFAST_SINCOS_THRESH || (x170.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x169.value)+(((-1.0)*(IKasin(x170.value))))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x171=((0.39)*gconst32*px);
IkReal x172=((0.39)*gconst31*py);
CheckValue<IkReal> x174=IKPowWithIntegerCheck(((-0.07605)+x171+x172),-1);
if(!x174.valid){
continue;
}
IkReal x173=x174.value;
cj1array[0]=(((x173*(py*py)))+((x173*(px*px)))+(((0.021294)*x173))+(((-1.0)*x171*x173))+(((-1.0)*x172*x173)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x175=IKsin(j1);
IkReal x176=IKcos(j1);
IkReal x177=(gconst31*py);
IkReal x178=(gconst32*px);
IkReal x179=((1.0)*x175);
IkReal x180=((1.0)*x176);
evalcond[0]=((((-1.0)*x177*x179))+(((0.195)*x175))+(((-1.0)*x178*x179)));
evalcond[1]=((((-1.0)*x178*x180))+(((-1.0)*x177*x180))+(((0.195)*x176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x181=((((26.2984878369494)*(py*py)))+(((26.2984878369494)*(px*px))));
if((x181) < -0.00001)
continue;
IkReal x182=IKabs(IKsqrt(x181));
IkReal x188 = x181;
if(IKabs(x188)==0){
continue;
}
IkReal x183=pow(x188,-0.5);
CheckValue<IkReal> x189=IKPowWithIntegerCheck(x182,-1);
if(!x189.valid){
continue;
}
IkReal x184=x189.value;
if((((1.0)+(((-1.0)*(x184*x184))))) < -0.00001)
continue;
IkReal x185=IKsqrt(((1.0)+(((-1.0)*(x184*x184)))));
IkReal x186=((5.12820512820513)*x183*x184);
IkReal x187=((5.12820512820513)*x183*x185);
CheckValue<IkReal> x190 = IKatan2WithCheck(IkReal(((5.12820512820513)*px)),IkReal(((5.12820512820513)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x190.valid){
continue;
}
if( (x184) < -1-IKFAST_SINCOS_THRESH || (x184) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal gconst33=((3.14159265358979)+(((-1.0)*(x190.value)))+(((-1.0)*(IKasin(x184)))));
IkReal gconst34=(((px*x187))+((py*x186)));
IkReal gconst35=((((-1.0)*py*x187))+((px*x186)));
CheckValue<IkReal> x191 = IKatan2WithCheck(IkReal(((5.12820512820513)*px)),IkReal(((5.12820512820513)*py)),IKFAST_ATAN2_MAGTHRESH);
if(!x191.valid){
continue;
}
if((((((26.2984878369494)*(py*py)))+(((26.2984878369494)*(px*px))))) < -0.00001)
continue;
CheckValue<IkReal> x192=IKPowWithIntegerCheck(IKabs(IKsqrt(((((26.2984878369494)*(py*py)))+(((26.2984878369494)*(px*px)))))),-1);
if(!x192.valid){
continue;
}
if( (x192.value) < -1-IKFAST_SINCOS_THRESH || (x192.value) > 1+IKFAST_SINCOS_THRESH )
    continue;
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x191.value)+(IKasin(x192.value))+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x193=((0.39)*gconst35*px);
IkReal x194=((0.39)*gconst34*py);
CheckValue<IkReal> x196=IKPowWithIntegerCheck(((-0.07605)+x193+x194),-1);
if(!x196.valid){
continue;
}
IkReal x195=x196.value;
cj1array[0]=(((x195*(px*px)))+(((-1.0)*x194*x195))+(((0.021294)*x195))+((x195*(py*py)))+(((-1.0)*x193*x195)));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x197=IKsin(j1);
IkReal x198=IKcos(j1);
IkReal x199=(gconst34*py);
IkReal x200=(gconst35*px);
IkReal x201=((1.0)*x197);
IkReal x202=((1.0)*x198);
evalcond[0]=((((-1.0)*x200*x201))+(((0.195)*x197))+(((-1.0)*x199*x201)));
evalcond[1]=((((-1.0)*x200*x202))+(((0.195)*x198))+(((-1.0)*x199*x202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x203=((0.39)*py*sj0);
IkReal x204=((0.39)*cj0*px);
CheckValue<IkReal> x206=IKPowWithIntegerCheck(((-0.07605)+x204+x203),-1);
if(!x206.valid){
continue;
}
IkReal x205=x206.value;
cj1array[0]=((((-1.0)*x204*x205))+(((-1.0)*x203*x205))+(((0.021294)*x205))+((x205*(py*py)))+((x205*(px*px))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[2];
IkReal x207=IKsin(j1);
IkReal x208=IKcos(j1);
IkReal x209=((1.0)*py*sj0);
IkReal x210=((1.0)*cj0*px);
evalcond[0]=((((0.195)*x207))+(((-1.0)*x207*x210))+(((-1.0)*x207*x209)));
evalcond[1]=((((0.195)*x208))+(((-1.0)*x208*x209))+(((-1.0)*x208*x210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j1]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
IkReal x211=((0.234)*cj2);
IkReal x212=(py*sj0);
IkReal x213=(cj0*px);
CheckValue<IkReal> x214=IKPowWithIntegerCheck(((0.195)+x211),-1);
if(!x214.valid){
continue;
}
CheckValue<IkReal> x215=IKPowWithIntegerCheck(((0.038025)+(((-0.195)*x212))+(((-0.195)*x213))+(((-1.0)*x211*x212))+(((-1.0)*x211*x213))+(((0.04563)*cj2))),-1);
if(!x215.valid){
continue;
}
if( IKabs(((-1.0)*pz*(x214.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x215.value)*(((-0.038025)+(((-0.054756)*(cj2*cj2)))+(pz*pz)+(((-0.09126)*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*pz*(x214.value)))+IKsqr(((x215.value)*(((-0.038025)+(((-0.054756)*(cj2*cj2)))+(pz*pz)+(((-0.09126)*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j1array[0]=IKatan2(((-1.0)*pz*(x214.value)), ((x215.value)*(((-0.038025)+(((-0.054756)*(cj2*cj2)))+(pz*pz)+(((-0.09126)*cj2))))));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x216=IKsin(j1);
IkReal x217=IKcos(j1);
IkReal x218=((0.234)*cj2);
IkReal x219=(py*sj0);
IkReal x220=((0.195)*x216);
IkReal x221=((0.195)*x217);
IkReal x222=((1.0)*cj0*px);
IkReal x223=((1.0)*x217);
IkReal x224=((0.39)*cj0*px);
IkReal x225=(pz*x216);
IkReal x226=((0.195)+x221);
evalcond[0]=(((x216*x218))+x220+pz);
evalcond[1]=(x226+(((-1.0)*x219))+((x217*x218))+(((-1.0)*x222)));
evalcond[2]=((((-1.0)*x216*x222))+(((-1.0)*x216*x219))+x220+(((-1.0)*pz*x223)));
evalcond[3]=((((-1.0)*x219*x223))+x218+x225+x226+(((-1.0)*x217*x222)));
evalcond[4]=((-0.021294)+(((-1.0)*(px*px)))+(((-0.39)*x225))+(((0.39)*x217*x219))+(((0.39)*x219))+x224+(((-0.07605)*x217))+(((-1.0)*(pz*pz)))+((x217*x224))+(((-1.0)*(py*py))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x227=IKPowWithIntegerCheck(IKsign(((0.195)+(((0.234)*cj2)))),-1);
if(!x227.valid){
continue;
}
CheckValue<IkReal> x228 = IKatan2WithCheck(IkReal(((-1.0)*pz)),IkReal(((-0.195)+((cj0*px))+((py*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x228.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x227.value)))+(x228.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[5];
IkReal x229=IKsin(j1);
IkReal x230=IKcos(j1);
IkReal x231=((0.234)*cj2);
IkReal x232=(py*sj0);
IkReal x233=((0.195)*x229);
IkReal x234=((0.195)*x230);
IkReal x235=((1.0)*cj0*px);
IkReal x236=((1.0)*x230);
IkReal x237=((0.39)*cj0*px);
IkReal x238=(pz*x229);
IkReal x239=((0.195)+x234);
evalcond[0]=(((x229*x231))+x233+pz);
evalcond[1]=(((x230*x231))+(((-1.0)*x235))+x239+(((-1.0)*x232)));
evalcond[2]=((((-1.0)*pz*x236))+x233+(((-1.0)*x229*x232))+(((-1.0)*x229*x235)));
evalcond[3]=((((-1.0)*x230*x235))+x238+x239+x231+(((-1.0)*x232*x236)));
evalcond[4]=((-0.021294)+(((-1.0)*(px*px)))+((x230*x237))+x237+(((0.39)*x232))+(((-0.39)*x238))+(((-1.0)*(pz*pz)))+(((-1.0)*(py*py)))+(((0.39)*x230*x232))+(((-0.07605)*x230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(3);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots7(IkReal rawcoeffs[7+1], IkReal rawroots[7], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots6(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[7];
    const int maxsteps = 110;
    for(int i = 0; i < 7; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[7];
    IkReal err[7];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 7; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 7; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 7; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 7; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[7] = {false};
    for(int i = 0; i < 7; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 7; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots7(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - Pendulum (0b753294d5632d92021767bdf2cff462)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x1000004a"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif


    
const IkReal C[3*3] = { 0.        , -0.63813601,  0.63813601,
   -0.13971354,  0.02740885,  0.3953125 ,
   -0.45833333, -0.10416667,  1.        };

void dotsq(int n, const IkReal A[], const IkReal b[], IkReal *c) {
    for(uint8_t i = 0; i < n; i++) {
        for(uint8_t j = 0; j < n; j++) {
            c[i] += A[i*n+j] * b[j];
        }
    }
}

bool out(IkSolutionList<IkReal> &solutions, int i) {
    std::vector<IkReal> solvalues(GetNumJoints());
    const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
    std::vector<IkReal> vsolfree(sol.GetFree().size());
    sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
    // printf("{ ");
    bool _oob = 0;
    for( std::size_t j = 0; j < solvalues.size(); ++j) {
        if(fabs(solvalues[j]) > M_PI / 2) {
            _oob = 1; break;
        }
    }
    if(!_oob) {
        for( std::size_t j = 0; j < solvalues.size(); ++j) {
            // printf("%d, ", (int)(solvalues[j] * 256.0f));
            printf("%.5f,", solvalues[j]);
        }
    }
    return !_oob;
    
    // printf("}, ");
}

int main(int argc, char** argv)
{
    // if( argc != 12+GetNumFreeParameters()+1 ) {
    //     printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
    //            "Returns the ik solutions given the transformation of the end effector specified by\n"
    //            "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
    //            "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
    //     return 1;
    // }

    // IkSolutionList<IkReal> solutions;
    // std::vector<IkReal> vfree(GetNumFreeParameters());
    // IkReal eerot[9],eetrans[3];
    // eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    // eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    // eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    // for(std::size_t i = 0; i < vfree.size(); ++i)
    //     vfree[i] = atof(argv[13+i]);
    // bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    // if( !bSuccess ) {
    //     fprintf(stderr,"Failed to get ik solution\n");
    //     return -1;
    // }

    // printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    
    #define DELTA 0.04
    #define NX 16
    #define NY 16
    #define NZ 8
    
    uint32_t ticks = 0, hits = 0;
    for(uint8_t z = 0; z < NZ; z++) { // azimuth
        printf("{ ");
        for(uint8_t y = 0; y < NY; y++) { // elevation
            printf("{ ");
            for(uint8_t x = 0; x < NX; x++) { // radius
                printf("{ ");
                IkReal x_, y_, z_;
                if(0) {
                    IkReal a_ = (IkReal)x / NX, b_ = ((IkReal)y / NY * 26 - 10) / 32 * M_PI, c_ = (IkReal)z / NZ;
                    IkReal ac1[3] = { a_, c_, 1.0f };
                    IkReal xyw[3] = { 0 };
                    dotsq(3, C, ac1, xyw);
                    for(uint8_t m = 0; m < 2; m++) {
                        xyw[m] /= xyw[2];
                    }
                    x_ = xyw[0], y_ = b_, z_ = xyw[1];
                }
                
                if(0) {
                    x_ = (z - NZ / 2) * M_PI / NZ, y_ = (y - NY / 2) * M_PI / NY, z_ = (IkReal)x / NX * 0.7f + 0.1f;
                }
                
                {
                    y_ = (y - NY / 2) * M_PI / NY;
                    x_ = (z * 1.17) / NZ;
                    IkReal c_ = (IkReal)x / NX;
                    IkReal top = 0.646887f - (x_ / 1.17) * (0.646887f - 0.471875f), bot;
                    if(x_ > 0.6) {
                        bot = 0.41 + (x_ - 0.6) / (1.17 - 0.63814f) * (0.471875f - 0.41);
                    }
                    else {
                        bot = 0.471875f - x_ / 0.6 * (0.471875f - 0.41);
                    }
                    z_ = bot + (top - bot) * c_;
                    // printf("%.3f\n", z_);
                }
                
                IkReal a = z_ * IKcos(x_) * IKcos(y_), b = z_ * IKcos(x_) * IKsin(y_), c = z_ * IKsin(x_);
                // printf("%d\t%d\t%d\t%.3f\t%.3f\t%.3f\n", x, y, z, a, b, c);
                // return 0;
                IkReal tx[3] = { a, b, c }, rot[3] = { 0 };
                std::vector<IkReal> vfree(GetNumFreeParameters());
                IkSolutionList<IkReal> solutions;
                bool bSuccess = ComputeIk(tx, rot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);
                int nsols_ = 0;
                if(bSuccess) {
                    int nsols = solutions.GetNumSolutions();
                    for(uint8_t i = 0; i < nsols; i++) {
                        std::vector<IkReal> solvalues(GetNumJoints());
                        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
                        std::vector<IkReal> vsolfree(sol.GetFree().size());
                        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
                        // printf("{ ");
                        bool _oob = false;
                        for( std::size_t j = 0; j < solvalues.size(); ++j) {
                            if(fabs(solvalues[j]) > M_PI / 2) {
                                _oob = 1; break;
                            }
                        }
                        if(!_oob) {
                            printf("{ ");
                            for( std::size_t j = 0; j < solvalues.size(); ++j) {
                                printf("%d, ", (int)(solvalues[j] * 256.0f));
                                // printf("%.5f,", solvalues[j]);
                            }
                            printf("}, ");
                            nsols_++;
                        }
                    }
                    
                    // if(nsols == 1 && out(solutions, 0)) {
                    //     // printf("{");
                    //     printf("%d,%d,%d\n", x, y, z);
                    //     printf("{ 0xFFFF, 0xFFFF, 0xFFFF, }, }\n");
                    // }
                    // else if(nsols >= 2) {
                    //     // printf("{");
                    //     for(std::size_t i = 0; i < nsols; ++i) {
                    //         if(out(solutions, i)) {
                    //             printf("%d,%d,%d\n", x, y, z);
                    //             break;
                    //         }
                    //     }
                    // }
                }
                for(uint8_t i = 0; i < 2 - nsols_; i++) {
                    printf("{ 0xFFFF, 0xFFFF, 0xFFFF, }, ");
                }
                printf("},\n");
            }
            printf("},\n");
        }
        printf("},\n");
    }
}

#endif
